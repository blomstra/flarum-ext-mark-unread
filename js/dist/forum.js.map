{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,+BCL9D,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,gB,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,kC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,mC,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,4B,aCGxDC,IAAAA,aAAAA,IAAqB,wBAAwB,WCM3CC,IAAAA,UAAAA,cAAqCC,IAAAA,UAAgB,kBAErDC,EAAAA,EAAAA,QAAOC,IAAoB,sBAAsB,SAAUC,EAAOC,GAC3DA,EAAWC,kBAAmBD,EAAWE,YAE9CH,EAAMI,IACJ,kBACA,EAAC,IAAD,CAAQC,KAAK,kBAAkBC,QAASC,KAAKC,aAAaC,KAAKR,IAC5DN,IAAAA,WAAAA,MAAqB,oDAExB,GAEH,IAEDI,IAAAA,aAAkC,WAChCQ,KAAKG,KAAK,CAAEC,QAAQ,IAAQC,MAAK,WAC3BjB,IAAAA,QAAAA,QAAoBkB,MACtBlB,IAAAA,QAAAA,IAAgB,UAAUmB,SAG5BC,EAAEC,QACH,GACF,CD1BF,G","sources":["webpack://@blomstra/mark-unread/webpack/bootstrap","webpack://@blomstra/mark-unread/webpack/runtime/compat get default export","webpack://@blomstra/mark-unread/webpack/runtime/define property getters","webpack://@blomstra/mark-unread/webpack/runtime/hasOwnProperty shorthand","webpack://@blomstra/mark-unread/webpack/runtime/make namespace object","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['forum/app']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['common/extend']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['common/Model']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['forum/components/DiscussionPage']\"","webpack://@blomstra/mark-unread/external root \"flarum.core.compat['common/components/Button']\"","webpack://@blomstra/mark-unread/./src/forum/index.ts","webpack://@blomstra/mark-unread/./src/forum/extend/extendDiscussions.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/DiscussionPage'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","import app from 'flarum/forum/app';\nimport extendDiscussions from './extend/extendDiscussions';\n\napp.initializers.add('blomstra/mark-unread', () => {\n  extendDiscussions();\n});\n","import app from 'flarum/forum/app';\nimport { extend } from 'flarum/common/extend';\nimport Model from 'flarum/common/Model';\nimport Discussion from 'flarum/common/models/Discussion';\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\nimport DiscussionPage from 'flarum/forum/components/DiscussionPage';\nimport Button from 'flarum/common/components/Button';\n\nexport default function () {\n  Discussion.prototype.canMarkUnread = Model.attribute('canMarkUnread');\n\n  extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n    if (!discussion.canMarkUnread() || discussion.isUnread()) return;\n\n    items.add(\n      'blomstra-unread',\n      <Button icon=\"fas fa-envelope\" onclick={this.unreadAction.bind(discussion)}>\n        {app.translator.trans('blomstra-mark-unread.forum.controls.mark-unread')}\n      </Button>,\n      30\n    );\n  });\n\n  DiscussionControls.unreadAction = function () {\n    this.save({ unread: true }).then(() => {\n      if (app.current.matches(DiscussionPage)) {\n        app.current.get('stream').update();\n      }\n\n      m.redraw();\n    });\n  };\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","Discussion","Model","extend","DiscussionControls","items","discussion","canMarkUnread","isUnread","add","icon","onclick","this","unreadAction","bind","save","unread","then","DiscussionPage","update","m","redraw"],"sourceRoot":""}